S -> program id begin {FUNCT} period

FUNCT -> funct id leftpar {VAR} rightpar begin {CMD} end

CMD -> {IF} | {FOR}
CMDBODY2 -> BODY2
CMDBODY2 -> 

IF -> if leftpar {BOOLEXP} rightpar begin {BODY} end | if leftpar {BOOLEXP} rightpar begin {BODY} else {BODY} end

BODY -> {DECLAVAR} {DECLAVARBODY1} | return id | {CMD} {CMDBODY2} | {NUMEXPRESSION} {NUMEXPRESSIONBODY3}| print leftpar string rightpar semicolon {BODY1}
BODY1 -> {BODY}
BODY1 -> 
BODY2 -> {BODY}
BODY2 -> 
BODY3 -> {BODY}
BODY3 -> 

DECLAVAR -> type id comma {DECLAVAR1} | type id | type id assign {VAL} comma {DECLAVAR2} | type id assign id 
DECLAVAR1 -> {DECLAVAR}
DECLAVAR1 -> 
DECLAVAR2 -> {DECLAVAR}
DECLAVAR2 -> 
DECLAVARBODY1 -> BODY1
DECLAVARBODY -> 

BOOLEXP -> {BOOLEXP2} {BOOLEXPNEW}
BOOLEXPNEW -> or {BOOLEXP2} {BOOLEXPNEW}
BOOLEXPNEW ->
BOOLEXP2 -> {BOOLEXP3} {BOOLEXPNEW2}
BOOLEXPNEW2 -> and {BOOLEXP3} {BOOLEXPNEW2}
BOOLEXPNEW2 ->
BOOLEXP3 -> {BOOLEXP4} {BOOLEXPNEW3}
BOOLEXPNEW3 -> equals {BOOLEXP4} {BOOLEXPNEW3} | different {BOOLEXP4} {BOOLEXPNEW3}
BOOLEXPNEW3 ->
BOOLEXP4 -> {BOOLEXP5} {BOOLEXPNEW4}
BOOLEXPNEW4 -> greatereq {BOOLEXP5} {BOOLEXPNEW4} | lesseq {BOOLEXP5} {BOOLEXPNEW4} | greater {BOOLEXP5} {BOOLEXPNEW4} | less {BOOLEXP5} {BOOLEXPNEW4}
BOOLEXP5 -> not {BOOLEXP} | boolean | id | leftpar {BOOLEXP} rightpar | number | string

VAL -> number| id

VAR -> type id

FOR -> for leftpar {VAR} assign {VAL} to {VAL} rightpar begin {BODY} end

NUMEXPRESSION -> 		{T}{NUMEXPRESSIONLINE}
NUMEXPRESSIONLINE ->	sum {T}{NUMEXPRESSIONLINE} | minus {T}{NUMEXPRESSIONLINE} | {EPSOLON}
T ->	{F}{TLINE}
TLINE ->	times {F} | division {F}{TLINE} | {EPSOLON}
F -> leftpar {NUMEXPRESSION} rightpar | id

NUMEXPRESSIONBODY3 -> BODY3
NUMEXPRESSIONBODY3 ->
